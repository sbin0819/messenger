[{"/Users/sbin/Desktop/project/clone/messenger/client/src/reportWebVitals.js":"1","/Users/sbin/Desktop/project/clone/messenger/client/src/ApolloClient.js":"2","/Users/sbin/Desktop/project/clone/messenger/client/src/App.js":"3","/Users/sbin/Desktop/project/clone/messenger/client/src/index.js":"4","/Users/sbin/Desktop/project/clone/messenger/client/src/containers/ChatRoomContainer.jsx":"5","/Users/sbin/Desktop/project/clone/messenger/client/src/pages/ChatRoom.jsx":"6","/Users/sbin/Desktop/project/clone/messenger/client/src/containers/Input.jsx":"7","/Users/sbin/Desktop/project/clone/messenger/client/src/pages/Home.jsx":"8","/Users/sbin/Desktop/project/clone/messenger/client/src/layout/Layout.jsx":"9","/Users/sbin/Desktop/project/clone/messenger/client/src/components/Home.jsx":"10"},{"size":362,"mtime":1610257388385,"results":"11","hashOfConfig":"12"},{"size":883,"mtime":1610257388383,"results":"13","hashOfConfig":"12"},{"size":342,"mtime":1610361028617,"results":"14","hashOfConfig":"12"},{"size":757,"mtime":1610338921931,"results":"15","hashOfConfig":"12"},{"size":1381,"mtime":1610339129073,"results":"16","hashOfConfig":"12"},{"size":184,"mtime":1610339399085,"results":"17","hashOfConfig":"12"},{"size":1108,"mtime":1610339375629,"results":"18","hashOfConfig":"12"},{"size":0,"mtime":1610360792589,"results":"19","hashOfConfig":"12"},{"size":1030,"mtime":1610362283623,"results":"20","hashOfConfig":"12"},{"size":121,"mtime":1610360835139,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16iehaf",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sbin/Desktop/project/clone/messenger/client/src/reportWebVitals.js",[],"/Users/sbin/Desktop/project/clone/messenger/client/src/ApolloClient.js",[],"/Users/sbin/Desktop/project/clone/messenger/client/src/App.js",[],"/Users/sbin/Desktop/project/clone/messenger/client/src/index.js",[],"/Users/sbin/Desktop/project/clone/messenger/client/src/containers/ChatRoomContainer.jsx",["44"],"import { gql, useQuery, useSubscription } from '@apollo/client';\n\nconst GET_CHATTING = gql`\n  query GetChatting {\n    chatting {\n      id\n      writer\n      description\n    }\n  }\n`;\n\n/* subscribeToMore에 document 정보를 주기 위해서 필요함 */\nconst NEW_CAHT = gql`\n  subscription NewChat {\n    newChat {\n      id\n      writer\n      description\n    }\n  }\n`;\n\nlet unsubscribe = null; //publish 했을때 변화\n\nconst ChatRoomContainer = () => {\n  const { loading, error, data, subscribeToMore } = useQuery(GET_CHATTING);\n  /** useSubscription을 굳이 쓸 필요가 없었다. */\n  // const { loading: subLoading, error: subError, data: newChat } = useSubscription(\n  //   NEW_CAHT,\n  // );\n\n  if (loading) return 'Loading...';\n  if (error) return `Error!`;\n  if (!unsubscribe) {\n    unsubscribe = subscribeToMore({\n      document: NEW_CAHT,\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const { newChat } = subscriptionData.data;\n        return {\n          ...prev,\n          chatting: [...prev.chatting, newChat],\n        };\n      },\n    });\n  }\n\n  return (\n    <div>\n      <h1>Apollo 채팅방에 오신걸 환영합니다.</h1>\n      {data.chatting.map((x) => (\n        <h3 key={x.id}>\n          {x.writer}: {x.description}\n        </h3>\n      ))}\n    </div>\n  );\n};\n\nexport default ChatRoomContainer;\n","/Users/sbin/Desktop/project/clone/messenger/client/src/pages/ChatRoom.jsx",["45"],"/Users/sbin/Desktop/project/clone/messenger/client/src/containers/Input.jsx",["46"],"import { useState, useEffect } from 'react';\nimport { gql, useMutation } from '@apollo/client';\nconst WRITE = gql`\n  mutation Write($writer: String!, $description: String!) {\n    write(writer: $writer, description: $description)\n  }\n`;\n\nconst Input = () => {\n  const [writer, setWriter] = useState('');\n  useEffect(() => {\n    const writer = prompt('Name');\n    setWriter(writer);\n  }, []);\n  const [description, setDescription] = useState('');\n  const [write, { data }] = useMutation(WRITE);\n  return (\n    <div>\n      <input\n        type='text'\n        value={description}\n        placeholder='내용을 입력하세요'\n        onChange={(e) => {\n          setDescription(e.target.value);\n        }}\n        onKeyPress={(e) => {\n          if (e.key === 'Enter') {\n            write({ variables: { writer, description } });\n            setDescription('');\n          }\n        }}\n      />\n      <button\n        onClick={() => {\n          write({ variables: { writer, description } });\n          setDescription('');\n        }}\n      >\n        확인\n      </button>\n    </div>\n  );\n};\n\nexport default Input;\n","/Users/sbin/Desktop/project/clone/messenger/client/src/pages/Home.jsx",[],"/Users/sbin/Desktop/project/clone/messenger/client/src/layout/Layout.jsx",[],"/Users/sbin/Desktop/project/clone/messenger/client/src/components/Home.jsx",[],{"ruleId":"47","severity":1,"message":"48","line":1,"column":25,"nodeType":"49","messageId":"50","endLine":1,"endColumn":40},{"ruleId":"51","severity":1,"message":"52","line":4,"column":1,"nodeType":"53","endLine":9,"endColumn":3},{"ruleId":"47","severity":1,"message":"54","line":16,"column":19,"nodeType":"49","messageId":"50","endLine":16,"endColumn":23},"no-unused-vars","'useSubscription' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'data' is assigned a value but never used."]